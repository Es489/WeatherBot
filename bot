import requests
import telegram
from telegram.ext import Filters, Updater, MessageHandler, CallbackQueryHandler, CommandHandler, InlineQueryHandler, \
    ConversationHandler
from weatherInfo import WeatherInfo


class TelegramWeatherBot:
    def __init__(self):
        
        token = bot_token #please add bot token key
        updater = Updater(token=token, use_context=True)
        updater.dispatcher.add_handler(CommandHandler("start", self.start))
        updater.dispatcher.add_handler(MessageHandler(Filters.location, self.location))
        updater.dispatcher.add_handler(CallbackQueryHandler(self.language_handler, pattern='ru'))
        updater.dispatcher.add_handler(CallbackQueryHandler(self.language_handler, pattern='en'))
        updater.dispatcher.add_handler(CallbackQueryHandler(self.weather_handler, pattern='current'))
        updater.dispatcher.add_handler(CallbackQueryHandler(self.weather_handler, pattern='forecast'))
        updater.start_polling()
        updater.idle()

    def start(self, update, context):
        memes = requests.get("https://api.giphy.com/v1/gifs/random?api_key=yQAwtUvFqEssA546ensQFTUpMEGKOMa5",
                             params=dict(tag="hello", rating="G"))
        update.message.reply_document(memes.json()["data"]["image_mp4_url"])

        context.user_data["id"] = update.message.chat_id
        self.language(update, context)



    def request_location(self, update, context):
        print("location requested", context.user_data["lang"], context.user_data["choice"])
        lb = ""
        message = ""
        if context.user_data["lang"]==[]:
            print("no language")
        if context.user_data["lang"] == "ru":
            lb = "Поделится местоположением"
            message = "Пожалуйста поделитесь своим местоположением для прогноза"
        else:
            lb = "Share location"
            message = "Please share your location for the forecast "

        location_button = telegram.KeyboardButton(text=lb, request_location=True)
        markup = telegram.ReplyKeyboardMarkup([[location_button]], resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(text=message, reply_markup=markup)

    def options(self, update, context):
        b1, b2, message = "", "", ""
        if context.user_data["lang"] == "ru":
            b1 = "Сейчас"
            b2 = "Прогноз"
            message = "Какую информацию о погоде вы хотите получить?"
        else:
            b1 = "Current"
            b2 = "Forecast"
            message = "What information would you like to get?"


        current_button = telegram.InlineKeyboardButton(text=b1, callback_data="current")
        forecast_button = telegram.InlineKeyboardButton(text=b2, callback_data="forecast")
        markup = telegram.InlineKeyboardMarkup([[current_button, forecast_button]])
        update.message.reply_text(text=message, reply_markup=markup)



    def location(self, update, context):

        lat, long = update.message.location["latitude"], update.message.location["longitude"]
        weather = WeatherInfo(lat, long)
        print("location recieved", context.user_data["lang"], context.user_data["choice"])
        if context.user_data == {}:
            c_info = weather.get_current_weather("ru")
            update.message.reply_text(text=c_info)

        if context.user_data["choice"] == "current":
            c_info = weather.get_current_weather(context.user_data["lang"])
            update.message.reply_text(text=c_info)
        elif context.user_data["choice"] == "forecast":
            f_info = weather.get_weather_forecast(context.user_data["lang"])
            update.message.reply_text(text=f_info)

    def language_handler(self, update, context):
        query = update.callback_query
        print(query.data)

        context.user_data["lang"] = query.data
        self.options(query, context)

    def weather_handler(self, update, context):
        query = update.callback_query


        context.user_data["choice"] = query.data
        print("requesting location", context.user_data)
        self.request_location(query, context)

    def language(self, update, context):
        rus_button = telegram.InlineKeyboardButton(text="Русский", callback_data="ru")
        en_button = telegram.InlineKeyboardButton(text="English", callback_data="en")
        markup = telegram.InlineKeyboardMarkup([[rus_button, en_button]])
        update.message.reply_text(text='Choose language/Выберите язык',
                                  reply_markup=markup, callback_data = "language")


if "__main__" == __name__:
    bot = TelegramWeatherBot()
